version: 2.1
jobs:
  build:
    machine:
      image: ubuntu-1604:202007-01

    steps:
      - checkout

      - run:
          name: Set Environment Variables for docker-compose
          command: |
            set -x
            touch .env
            echo PROJECT_NAME=$PROJECT_NAME >> .env
            echo POSTGRES_USER=$POSTGRES_USER >> .env
            echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env
            echo POSTGRES_DB=$POSTGRES_DB >> .env
            echo POSTGRES_PORT=$POSTGRES_PORT >> .env
            cat .env

      - run:
          name: Confirm directory state
          command: |
            set -x
            pwd && ls
            echo "ls app/my_app/"
            ls app/my_app
            echo "ls db/"
            ls db

      - run:
          name: Build Docker containers
          command: |
            set -x
            docker-compose build
            docker-compose run --rm app sh -c "mix --version"
            docker-compose run --rm app mix archive
            docker-compose run --rm db sh -c "psql --version"
            docker-compose run --rm app bash -c "node --version && npm --version"

      - run:
          name: Mix deps.get
          command: |
            set -x
            docker-compose run --rm app sh -c "cd my_app && pwd && ls && mix deps.get && mix deps.compile"

      - run:
          name: Npm install in assets directory
          command: |
            set -x
            docker-compose run --rm app sh -c "cd my_app/assets && pwd && ls && npm install && node node_modules/webpack/bin/webpack.js --mode development"

      - run:
          name: Run Docker containers
          command: |
            set -x
            docker-compose up -d
            sleep 5
            docker ps -f status=running
            docker-compose logs

      # TODO: prepare MyApp.Repo
      # - run:
      #     name: Mix test
      #     command: |
      #       set -x
      #       docker-compose run --rm app sh -c "pwd && ls && cd my_app && mix test"

      - run:
          name: Down Docker container and Finish pipeline
          command: |
            set -x
            docker-compose down --rmi all --volumes --remove-orphans
            echo "Finish pipeline"
